# TTSNode —— Edge-TTS 服务
name: "tts_output"
version: "1.0.0"

service_servers:
  - service: "play_tts"
    srv_type: "piper_msgs/PlayText"
    request_fields:
      - { name: "text", type: "string", desc: "要朗读的文本" }
      - { name: "sync", type: "bool", desc: "true=同步播放；false=异步播放" }
    response_fields:
      - { name: "success", type: "bool", desc: "执行流程是否触发成功" }
    desc: "Edge-TTS 合成并播放 .wav"

publishers:     []
subscriptions:  []
parameters:     []

examples:
  # 1️⃣ 启动节点
  - |
    ros2 run piper_voice tts_output

  # 2️⃣ CLI 调用示例
  - |
    # 同步播报
    ros2 service call /play_tts piper_msgs/srv/PlayText \
      '{text: "你好，世界", sync: true}'

    # 异步播报
    ros2 service call /play_tts piper_msgs/srv/PlayText \
      '{text: "后台播放测试中", sync: false}'

  # 3️⃣ Python 客户端快速调用
  - |
    import rclpy
    from rclpy.node import Node
    from piper_msgs.srv import PlayText

    class QuickCaller(Node):
        def __init__(self):
            super().__init__("quick_tts_caller")
            cli = self.create_client(PlayText, "play_tts")
            while not cli.wait_for_service(timeout_sec=1.0):
                self.get_logger().info("等待 TTS 服务中…")

            req = PlayText.Request()
            req.text = "Python 脚本调用成功"
            req.sync = True
            future = cli.call_async(req)
            rclpy.spin_until_future_complete(self, future)
            self.get_logger().info("返回值 success=%s", future.result().success)

    rclpy.init()
    QuickCaller()
    rclpy.shutdown()
